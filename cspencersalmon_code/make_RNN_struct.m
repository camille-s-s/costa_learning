function RNN = make_RNN_struct(trainRNN, doSmooth, smoothWidth, meanSubtract, doSoftNorm, normByRegion, rmvOutliers, ...
  outliers, rnnDir, RNNname, dtFactor, g, alpha, tauRNN, tauWN, ampInWN, ampWN, nRunTrain, nonlinearity, ...
    nUnits, nTrls, nSets, arrayUnit, arrayRgns, iTrlID, trl_num, setID, rModelSample, tRNN, exp_data, tData, ...
    dtRNN, dtData, J, J0, fittedConsJ, sampleTimePoints, chi2, pVars, stdData) 
% package up and save outputs at the end of training for each link

%% .PARAMS

% doSmooth, 
% smoothWidth,
% meanSubtract,
% doSoftNorm, 
% normByRegion,
% rmvOutliers, 
% outliers,
% rnnDir, 
% RNNname, 
% dtFactor, 
% dtRNN,
% dtData, 
% g, 
% alpha, 
% tauRNN,
% tauWN, 
% ampInWN, 
% nRunTrain, 
% nonlinearity, 
% nUnits, 
% nTrls, 
% nSets, 
% arrayUnit,
% arrayRgns, 

%% .MDL

% iTrlID, 
% trl_num, 
% setID, 
% rModelSample, 
% tRNN % from allPossTS
% exp_data (exp_data_path generates 'outliers', 'fixOnInds', 'stimTimeInds', 'nTrls', 'nTrlsPerSet', 'nSets', 'setID')
% J, 
% J0, 
% fittedConsJ, 
% sampleTimePoints, 
% chi2, 
% pVars, 
% stdData

%%
RNN = struct;

currentParams = struct( ...
    'doSmooth', doSmooth, ...
    'smoothWidth', smoothWidth, ...
    'meanSubtract', meanSubtract, ...
    'doSoftNorm', doSoftNorm, ...
    'normByRegion', normByRegion, ...
    'rmvOutliers', rmvOutliers, ...
    'outliers', outliers, ...
    'exp_data_path', [rnnDir 'exp_data' filesep, RNNname, '_exp_data.mat'], ...
    'dtFactor', dtFactor, ...
    'dtRNN', dtRNN, ...
    'dtData', dtData, ...
    'g', g, ...
    'alpha', alpha, ...
    'tauRNN', tauRNN, ...
    'tauWN', tauWN, ...
    'ampInWN', ampInWN, ...
    'ampWN', ampWN, ...
    'nonlinearity', nonlinearity, ...
    'nRunTrain', nRunTrain, ...
    'nUnits', nUnits, ...
    'nTrls', nTrls, ...
    'nSets', nSets, ...
    'arrayUnit', {arrayUnit}, ...
    'arrayRegions', {arrayRgns});

if trl_num == 1
    RNN.params = currentParams;
else
    RNN.params = [];
end

if trainRNN
RNN.mdl = struct(...
    'train_trl', iTrlID, ...
    'trl_num', trl_num, ...
    'setID', setID(iTrlID), ...
    'RMdlSample', rModelSample, ...
    'tRNN', tRNN, ...
    'exp_data', exp_data, ...
    'tData', tData, ...
    'J', J, ...
    'J0', J0, ...
    'fittedConsJ', fittedConsJ, ...
    'sampleTimePoints', sampleTimePoints, ...
    'chi2', chi2, ...
    'pVars', pVars, ...
    'stdData', stdData(trl_num));
else
   RNN.test = struct(...
       'test_trl', iTrlID, ...
       'trl_num', trl_num, ...
       'setID', setID(iTrlID), ...
       'RMdlSample_test', rModelSample, ...
       'tRNN', tRNN, ...
       'exp_data', exp_data, ...
       'tData', tData, ...
       'J_test', J, ...
       'chi2_test', chi2, ...
       'pVars_test',  pVars, ...
       'stdData_test', stdData(trl_num));
end

end